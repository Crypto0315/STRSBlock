package com.aizone.blockchain.wallet;import com.aizone.blockchain.db.DBAccess;import com.aizone.blockchain.encrypt.WalletUtils;import com.aizone.blockchain.event.NewAccountEvent;import com.aizone.blockchain.net.ApplicationContextProvider;import com.google.common.base.Optional;import com.mathworks.toolbox.javabuilder.MWNumericArray;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.math.BigDecimal;import java.security.KeyPair;import java.util.List;import java.util.Map;/** * 账户控制工具类, 锁定，解锁等操作 * @since 24-6-6 */@Componentpublic class Personal {    @Autowired    private DBAccess dbAccess;    /**     * 创建一个默认账户     * @return     */    public Account STRSAccount() throws Exception {        List<Object> setup = WalletUtils.generateSetup();        Long n = (Long) setup.get(0);        Double q = (Double) setup.get(1);        double[][] h = (double[][]) setup.get(2);        double[][] f = (double[][]) setup.get(3);        Double N = (Double) setup.get(4);        String miu = (String) setup.get(5);        Map<String, Object[]> stringMap = WalletUtils.generateKeyGen(setup);        Object[] strsKeyGen = stringMap.get("strsKeyGen");        double[][] SK1 = (double[][]) ((MWNumericArray) strsKeyGen[0]).toDoubleArray();        double[][] SK2 = (double[][]) ((MWNumericArray) strsKeyGen[1]).toDoubleArray();        double[][] PK = (double[][]) ((MWNumericArray) strsKeyGen[2]).toDoubleArray();        Account account = new Account(PK,n,N,miu,q,h,f);        //发布同步账号事件        ApplicationContextProvider.publishEvent(new NewAccountEvent(account));        account.setPrivateKey1(WalletUtils.encodeObjectToBase58WithCompression(SK1));        account.setPrivateKey2(WalletUtils.encodeObjectToBase58WithCompression(SK2));        dbAccess.putAccount(account);        System.out.println("SK1= "+(WalletUtils.encodeObjectToBase58WithCompression(SK1)));        System.out.println("SK1= "+(WalletUtils.encodeObjectToBase58WithCompression(SK2)));        return account;    }    /**     * 创建挖矿账号     * @return     */    public Account createCoinBase() throws Exception {        List<Object> setup = WalletUtils.generateSetup();        Long n = (Long) setup.get(0);        Double q = (Double) setup.get(1);        double[][] h = (double[][]) setup.get(2);        double[][] f = (double[][]) setup.get(3);        Double N = (Double) setup.get(4);        String miu = (String) setup.get(5);        Map<String, Object[]> stringMap = WalletUtils.generateKeyGen(setup);        Object[] strsKeyGen = stringMap.get("strsKeyGen");        double[][] SK1 = (double[][]) ((MWNumericArray) strsKeyGen[0]).toDoubleArray();        double[][] SK2 = (double[][]) ((MWNumericArray) strsKeyGen[1]).toDoubleArray();        double[][] PK = (double[][]) ((MWNumericArray) strsKeyGen[2]).toDoubleArray();        Account account = new Account(PK,n,N,miu,q,h,f);        //发布同步账号事件        ApplicationContextProvider.publishEvent(new NewAccountEvent(account));        account.setPrivateKey1(WalletUtils.encodeObjectToBase58WithCompression(SK1));        account.setPrivateKey2(WalletUtils.encodeObjectToBase58WithCompression(SK2));        //如果没有发现挖矿账号, 则优先创建挖矿账号        dbAccess.putCoinBaseAccount(account);        System.out.println("默认SK1= "+(WalletUtils.encodeObjectToBase58WithCompression(SK1)));        System.out.println("默认SK2= "+(WalletUtils.encodeObjectToBase58WithCompression(SK2)));        return account;    }}